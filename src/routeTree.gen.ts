/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as FeedbackRouteImport } from './routes/feedback'
import { Route as FaqRouteImport } from './routes/faq'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TodosIndexRouteImport } from './routes/todos/index'
import { Route as TodosCreateRouteImport } from './routes/todos/create'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthMagicLinkRouteImport } from './routes/auth/magic-link'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const FeedbackRoute = FeedbackRouteImport.update({
  id: '/feedback',
  path: '/feedback',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TodosIndexRoute = TodosIndexRouteImport.update({
  id: '/todos/',
  path: '/todos/',
  getParentRoute: () => rootRouteImport,
} as any)
const TodosCreateRoute = TodosCreateRouteImport.update({
  id: '/todos/create',
  path: '/todos/create',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthMagicLinkRoute = AuthMagicLinkRouteImport.update({
  id: '/auth/magic-link',
  path: '/auth/magic-link',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/feedback': typeof FeedbackRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/magic-link': typeof AuthMagicLinkRoute
  '/auth/register': typeof AuthRegisterRoute
  '/todos/create': typeof TodosCreateRoute
  '/todos': typeof TodosIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/feedback': typeof FeedbackRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/magic-link': typeof AuthMagicLinkRoute
  '/auth/register': typeof AuthRegisterRoute
  '/todos/create': typeof TodosCreateRoute
  '/todos': typeof TodosIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/feedback': typeof FeedbackRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/magic-link': typeof AuthMagicLinkRoute
  '/auth/register': typeof AuthRegisterRoute
  '/todos/create': typeof TodosCreateRoute
  '/todos/': typeof TodosIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/faq'
    | '/feedback'
    | '/privacy'
    | '/terms'
    | '/auth/login'
    | '/auth/magic-link'
    | '/auth/register'
    | '/todos/create'
    | '/todos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/faq'
    | '/feedback'
    | '/privacy'
    | '/terms'
    | '/auth/login'
    | '/auth/magic-link'
    | '/auth/register'
    | '/todos/create'
    | '/todos'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/faq'
    | '/feedback'
    | '/privacy'
    | '/terms'
    | '/auth/login'
    | '/auth/magic-link'
    | '/auth/register'
    | '/todos/create'
    | '/todos/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  FaqRoute: typeof FaqRoute
  FeedbackRoute: typeof FeedbackRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthMagicLinkRoute: typeof AuthMagicLinkRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  TodosCreateRoute: typeof TodosCreateRoute
  TodosIndexRoute: typeof TodosIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/feedback': {
      id: '/feedback'
      path: '/feedback'
      fullPath: '/feedback'
      preLoaderRoute: typeof FeedbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/todos/': {
      id: '/todos/'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/todos/create': {
      id: '/todos/create'
      path: '/todos/create'
      fullPath: '/todos/create'
      preLoaderRoute: typeof TodosCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/magic-link': {
      id: '/auth/magic-link'
      path: '/auth/magic-link'
      fullPath: '/auth/magic-link'
      preLoaderRoute: typeof AuthMagicLinkRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  FaqRoute: FaqRoute,
  FeedbackRoute: FeedbackRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthMagicLinkRoute: AuthMagicLinkRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  TodosCreateRoute: TodosCreateRoute,
  TodosIndexRoute: TodosIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
